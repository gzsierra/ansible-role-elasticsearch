---
- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Install Elasticsearch.
  package:
    name: elasticsearch
    state: "{{ elasticsearch_package_state }}"

#### START SECURITY
- name: Check if elastic host cert file exists
  stat: 
    path: "/etc/elasticsearch/{{ inventory_hostname }}.p12"
  register: elastic_host_cert

- name: Secure elasticsearch
  copy:
    src: "{{ elastic_ca }}"
    dest: "/etc/elasticsearch/{{ elastic_ca }}"
  tags: secure
  when: stat_result.stat.exists == False

- name: Create host certificate
  command: /etc/elasticsearch/bin/elasticsearch-certutil cert 
  args:
    ca: "{{ elastic_ca }}"
    name: "{{ inventory_hostname }}"
    dns: "{{ inventory_hostname }}"
    ip: "{{ ansible_host }}"
    out: "/etc/elasticsearch/{{ inventory_hostname }}.p12"
  tags: secure
  when: stat_result.stat.exists == False

- name: Remove ca
  file:
    path: "/etc/elasticsearch/{{ elastic_ca }}"
    state: absent
  tags: secure
  when: stat_result.stat.exists == False
#### END SECURITY

- name: Configure Elasticsearch.
  template:
    src: "{{ item }}.j2"
    dest: /etc/elasticsearch/{{ item }}
    owner: root
    group: elasticsearch
    mode: 0660
  with_items:
    - "{{ elasticsearch_config_template }}"
    - jvm.options
  notify: restart elasticsearch

- name: Force a restart if configuration has changed.
  meta: flush_handlers

- name: Start Elasticsearch.
  service:
    name: elasticsearch
    state: "{{ elasticsearch_service_state }}"
    enabled: "{{ elasticsearch_service_enabled }}"

- name: Make sure Elasticsearch is running before proceeding.
  wait_for:
    host: "{{ elasticsearch_network_host }}"
    port: "{{ elasticsearch_http_port }}"
    delay: 3
    timeout: 300
